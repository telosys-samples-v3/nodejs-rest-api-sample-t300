/*
 * Created on 2018-01-15 ( Time 11:23:59 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Publisher entity
const Publisher = require('../model/Publisher');

// Load DAO Common functions
const GenericDao = require('./commons/genericDao');

// SQL Queries
const sqlSelectById = "SELECT code, countryCode, name, email, contact, city, zipCode, phone FROM publisher WHERE code=$code";
const sqlSelectAll = "SELECT * FROM publisher";
const sqlCount = "SELECT COUNT(*) AS count FROM publisher";
const sqlUpdate = "UPDATE publisher SET countryCode=$countryCode, name=$name, email=$email, contact=$contact, city=$city, zipCode=$zipCode, phone=$phone WHERE code=$code";
const sqlDelete = "DELETE FROM publisher WHERE code=$code";
const sqlExist = "SELECT (count(*) > 0) as found FROM publisher WHERE code=$code";
const sqlInsert = "INSERT into publisher (code, countryCode, name, email, contact, city, zipCode, phone) VALUES ($code, $countryCode, $name, $email, $contact, $city, $zipCode, $phone)";

/**
 * DAO of entity Publisher
 */
module.exports = class PublisherDao {

    constructor() {
        this.genericDao = new GenericDao(
            sqlSelectById,
            sqlSelectAll,
            sqlCount,
		    sqlInsert,
            sqlUpdate,
            sqlDelete,
            sqlExist
        );
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param code
     * @return entity
     */
    findById(code) {
       let sqlParams = {
			$code: code
		};
        return this.genericDao.findOne(sqlParams)
            .then(row => {
                if(row) {
                    return new Publisher(row.code, row.countryCode, row.name, row.email, row.contact, row.city, row.zipCode, row.phone);
                } else {
                    return false;
                }
            })
    };

    /**
     * Finds all entities.
     * @return all entities
     */
    findAll() {
        return this.genericDao.findAll().then(rows => {
            let publishers = [];
            if (rows) {
                for (const row of rows) {
                    publishers.push(new Publisher(row.code, row.countryCode, row.name, row.email, row.contact, row.city, row.zipCode, row.phone));
                }
            }
            return publishers;
        });
    };

    /**
     * Counts all the records present in the database
     * @return count
     */
    countAll() {
        return this.genericDao.findOne();
    };

    /**
     * Updates the given entity in the database
     * @param Publisher
     * @return true if the entity has been updated, false if not found and not updated
     */
    update(Publisher) {
        let sqlParams = {
 			$code: Publisher.code,
 			$countryCode: Publisher.countryCode,
 			$name: Publisher.name,
 			$email: Publisher.email,
 			$contact: Publisher.contact,
 			$city: Publisher.city,
 			$zipCode: Publisher.zipCode,
 			$phone: Publisher.phone
        };
        return this.genericDao.update(sqlParams);
    };

    /**
     * Save the given entity in the database in case it exist, else create a new one
     * @param Publisher
     * @return the updated or created entity
     */
    save(Publisher) {
        return this.exists(Publisher).then(exist => {
            if(exist) {
                return this.update(Publisher).then(result => {
                    if (result === true) {
                        return {
                            body:{
                                code: Publisher.code,
                                countryCode: Publisher.countryCode,
                                name: Publisher.name,
                                email: Publisher.email,
                                contact: Publisher.contact,
                                city: Publisher.city,
                                zipCode: Publisher.zipCode,
                                phone: Publisher.phone
                            },
                            newItem: false
                        };
                    } else {
                        return result;
                    }
                });
            } else {
                return this.create(Publisher).then(result => {
                    if (result) {
                        return {
                            body: result,
                            newItem: true
                        };
                    } else {
                        return result;
                    }
                });
            }
        });
    };

    /**
     * Creates the given entity in the database
     * @param Publisher
     * returns database insertion status
     */
    create(Publisher) {
        let sqlParams = {
 			$code: Publisher.code,
 			$countryCode: Publisher.countryCode,
 			$name: Publisher.name,
 			$email: Publisher.email,
 			$contact: Publisher.contact,
 			$city: Publisher.city,
 			$zipCode: Publisher.zipCode,
 			$phone: Publisher.phone
        };

        return this.genericDao.insert(sqlParams)
            .then(id => {
                if (id) {
                    return {
 					    code: Publisher.code,
 					    countryCode: Publisher.countryCode,
 					    name: Publisher.name,
 					    email: Publisher.email,
 					    contact: Publisher.contact,
 					    city: Publisher.city,
 					    zipCode: Publisher.zipCode,
 					    phone: Publisher.phone
                  };
                } else {
                    return false;
                }
            });
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param code
     * returns database deletion status
     */
    deleteById(code) {
		let sqlParams = {
			$code: code
		};
        return this.genericDao.delete(sqlParams);
    };

    /**
     * Deletes an entity using the entity
     * @param Publisher
     * returns database deletion status
     */
    delete(Publisher) {
        let sqlParams = {
 			$code : Publisher.code
        };
        return this.genericDao.delete(sqlParams);
    };

    /**
     * Returns true if an entity exists with the given Id / Primary Key
     * @param code
     * returns database entry existence status (true/false)
     */
    existsById(code) {
		let sqlParams = {
			$code: code
		};
        return this.genericDao.existsOne(sqlParams);
    };

    /**
     * Returns true if an entity exists using the entity
     * @param Publisher
     * returns database entry existence status (true/false)
     */
    exists(Publisher) {
        let sqlParams = {
            $code : Publisher.code
        };
        return this.genericDao.existsOne(sqlParams);
    };
};