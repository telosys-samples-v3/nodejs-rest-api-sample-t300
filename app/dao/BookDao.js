/*
 * Created on 2018-01-15 ( Time 11:23:58 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Book entity
const Book = require('../model/Book');

// Load DAO Common functions
const GenericDao = require('./commons/genericDao');

// SQL Queries
const sqlSelectById = "SELECT id, publisherId, authorId, isbn, title, price, quantity, discount, availability, bestSeller FROM book WHERE id=$id";
const sqlSelectAll = "SELECT * FROM book";
const sqlCount = "SELECT COUNT(*) AS count FROM book";
const sqlUpdate = "UPDATE book SET publisherId=$publisherId, authorId=$authorId, isbn=$isbn, title=$title, price=$price, quantity=$quantity, discount=$discount, availability=$availability, bestSeller=$bestSeller WHERE id=$id";
const sqlDelete = "DELETE FROM book WHERE id=$id";
const sqlExist = "SELECT (count(*) > 0) as found FROM book WHERE id=$id";
const sqlInsert = "INSERT into book (id, publisherId, authorId, isbn, title, price, quantity, discount, availability, bestSeller) VALUES ($id, $publisherId, $authorId, $isbn, $title, $price, $quantity, $discount, $availability, $bestSeller)";

/**
 * DAO of entity Book
 */
module.exports = class BookDao {

    constructor() {
        this.genericDao = new GenericDao(
            sqlSelectById,
            sqlSelectAll,
            sqlCount,
		    sqlInsert,
            sqlUpdate,
            sqlDelete,
            sqlExist
        );
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param id
     * @return entity
     */
    findById(id) {
       let sqlParams = {
			$id: id
		};
        return this.genericDao.findOne(sqlParams)
            .then(row => {
                if(row) {
                    return new Book(row.id, row.publisherId, row.authorId, row.isbn, row.title, row.price, row.quantity, row.discount, row.availability, row.bestSeller);
                } else {
                    return false;
                }
            })
    };

    /**
     * Finds all entities.
     * @return all entities
     */
    findAll() {
        return this.genericDao.findAll().then(rows => {
            let books = [];
            if (rows) {
                for (const row of rows) {
                    books.push(new Book(row.id, row.publisherId, row.authorId, row.isbn, row.title, row.price, row.quantity, row.discount, row.availability, row.bestSeller));
                }
            }
            return books;
        });
    };

    /**
     * Counts all the records present in the database
     * @return count
     */
    countAll() {
        return this.genericDao.findOne();
    };

    /**
     * Updates the given entity in the database
     * @param Book
     * @return true if the entity has been updated, false if not found and not updated
     */
    update(Book) {
        let sqlParams = {
 			$id: Book.id,
 			$publisherId: Book.publisherId,
 			$authorId: Book.authorId,
 			$isbn: Book.isbn,
 			$title: Book.title,
 			$price: Book.price,
 			$quantity: Book.quantity,
 			$discount: Book.discount,
 			$availability: Book.availability,
 			$bestSeller: Book.bestSeller
        };
        return this.genericDao.update(sqlParams);
    };

    /**
     * Save the given entity in the database in case it exist, else create a new one
     * @param Book
     * @return the updated or created entity
     */
    save(Book) {
        return this.exists(Book).then(exist => {
            if(exist) {
                return this.update(Book).then(result => {
                    if (result === true) {
                        return {
                            body:{
                                id: Book.id,
                                publisherId: Book.publisherId,
                                authorId: Book.authorId,
                                isbn: Book.isbn,
                                title: Book.title,
                                price: Book.price,
                                quantity: Book.quantity,
                                discount: Book.discount,
                                availability: Book.availability,
                                bestSeller: Book.bestSeller
                            },
                            newItem: false
                        };
                    } else {
                        return result;
                    }
                });
            } else {
                return this.create(Book).then(result => {
                    if (result) {
                        return {
                            body: result,
                            newItem: true
                        };
                    } else {
                        return result;
                    }
                });
            }
        });
    };

    /**
     * Creates the given entity in the database
     * @param Book
     * returns database insertion status
     */
    create(Book) {
        let sqlParams = {
 			$id: Book.id,
 			$publisherId: Book.publisherId,
 			$authorId: Book.authorId,
 			$isbn: Book.isbn,
 			$title: Book.title,
 			$price: Book.price,
 			$quantity: Book.quantity,
 			$discount: Book.discount,
 			$availability: Book.availability,
 			$bestSeller: Book.bestSeller
        };

        return this.genericDao.insert(sqlParams)
            .then(id => {
                if (id) {
                    return {
 					    id: Book.id,
 					    publisherId: Book.publisherId,
 					    authorId: Book.authorId,
 					    isbn: Book.isbn,
 					    title: Book.title,
 					    price: Book.price,
 					    quantity: Book.quantity,
 					    discount: Book.discount,
 					    availability: Book.availability,
 					    bestSeller: Book.bestSeller
                  };
                } else {
                    return false;
                }
            });
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param id
     * returns database deletion status
     */
    deleteById(id) {
		let sqlParams = {
			$id: id
		};
        return this.genericDao.delete(sqlParams);
    };

    /**
     * Deletes an entity using the entity
     * @param Book
     * returns database deletion status
     */
    delete(Book) {
        let sqlParams = {
 			$id : Book.id
        };
        return this.genericDao.delete(sqlParams);
    };

    /**
     * Returns true if an entity exists with the given Id / Primary Key
     * @param id
     * returns database entry existence status (true/false)
     */
    existsById(id) {
		let sqlParams = {
			$id: id
		};
        return this.genericDao.existsOne(sqlParams);
    };

    /**
     * Returns true if an entity exists using the entity
     * @param Book
     * returns database entry existence status (true/false)
     */
    exists(Book) {
        let sqlParams = {
            $id : Book.id
        };
        return this.genericDao.existsOne(sqlParams);
    };
};