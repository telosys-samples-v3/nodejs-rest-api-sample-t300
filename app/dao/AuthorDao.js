/*
 * Created on 2018-01-15 ( Time 11:23:58 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Author entity
const Author = require('../model/Author');

// Load DAO Common functions
const GenericDao = require('./commons/genericDao');

// SQL Queries
const sqlSelectById = "SELECT id, firstName, lastName FROM author WHERE id=$id";
const sqlSelectAll = "SELECT * FROM author";
const sqlCount = "SELECT COUNT(*) AS count FROM author";
const sqlUpdate = "UPDATE author SET firstName=$firstName, lastName=$lastName WHERE id=$id";
const sqlDelete = "DELETE FROM author WHERE id=$id";
const sqlExist = "SELECT (count(*) > 0) as found FROM author WHERE id=$id";
const sqlInsert = "INSERT into author (id, firstName, lastName) VALUES ($id, $firstName, $lastName)";

/**
 * DAO of entity Author
 */
module.exports = class AuthorDao {

    constructor() {
        this.genericDao = new GenericDao(
            sqlSelectById,
            sqlSelectAll,
            sqlCount,
		    sqlInsert,
            sqlUpdate,
            sqlDelete,
            sqlExist
        );
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param id
     * @return entity
     */
    findById(id) {
       let sqlParams = {
			$id: id
		};
        return this.genericDao.findOne(sqlParams)
            .then(row => {
                if(row) {
                    return new Author(row.id, row.firstName, row.lastName);
                } else {
                    return false;
                }
            })
    };

    /**
     * Finds all entities.
     * @return all entities
     */
    findAll() {
        return this.genericDao.findAll().then(rows => {
            let authors = [];
            if (rows) {
                for (const row of rows) {
                    authors.push(new Author(row.id, row.firstName, row.lastName));
                }
            }
            return authors;
        });
    };

    /**
     * Counts all the records present in the database
     * @return count
     */
    countAll() {
        return this.genericDao.findOne();
    };

    /**
     * Updates the given entity in the database
     * @param Author
     * @return true if the entity has been updated, false if not found and not updated
     */
    update(Author) {
        let sqlParams = {
 			$id: Author.id,
 			$firstName: Author.firstName,
 			$lastName: Author.lastName
        };
        return this.genericDao.update(sqlParams);
    };

    /**
     * Save the given entity in the database in case it exist, else create a new one
     * @param Author
     * @return the updated or created entity
     */
    save(Author) {
        return this.exists(Author).then(exist => {
            if(exist) {
                return this.update(Author).then(result => {
                    if (result === true) {
                        return {
                            body:{
                                id: Author.id,
                                firstName: Author.firstName,
                                lastName: Author.lastName
                            },
                            newItem: false
                        };
                    } else {
                        return result;
                    }
                });
            } else {
                return this.create(Author).then(result => {
                    if (result) {
                        return {
                            body: result,
                            newItem: true
                        };
                    } else {
                        return result;
                    }
                });
            }
        });
    };

    /**
     * Creates the given entity in the database
     * @param Author
     * returns database insertion status
     */
    create(Author) {
        let sqlParams = {
 			$id: Author.id,
 			$firstName: Author.firstName,
 			$lastName: Author.lastName
        };

        return this.genericDao.insert(sqlParams)
            .then(id => {
                if (id) {
                    return {
 					    id: Author.id,
 					    firstName: Author.firstName,
 					    lastName: Author.lastName
                  };
                } else {
                    return false;
                }
            });
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param id
     * returns database deletion status
     */
    deleteById(id) {
		let sqlParams = {
			$id: id
		};
        return this.genericDao.delete(sqlParams);
    };

    /**
     * Deletes an entity using the entity
     * @param Author
     * returns database deletion status
     */
    delete(Author) {
        let sqlParams = {
 			$id : Author.id
        };
        return this.genericDao.delete(sqlParams);
    };

    /**
     * Returns true if an entity exists with the given Id / Primary Key
     * @param id
     * returns database entry existence status (true/false)
     */
    existsById(id) {
		let sqlParams = {
			$id: id
		};
        return this.genericDao.existsOne(sqlParams);
    };

    /**
     * Returns true if an entity exists using the entity
     * @param Author
     * returns database entry existence status (true/false)
     */
    exists(Author) {
        let sqlParams = {
            $id : Author.id
        };
        return this.genericDao.existsOne(sqlParams);
    };
};