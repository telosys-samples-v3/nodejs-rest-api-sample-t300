/*
 * Created on 2018-01-15 ( Time 11:23:58 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Badge entity
const Badge = require('../model/Badge');

// Load DAO Common functions
const GenericDao = require('./commons/genericDao');

// SQL Queries
const sqlSelectById = "SELECT badgeNumber, authorizationLevel, endOfValidity FROM badge WHERE badgeNumber=$badgeNumber";
const sqlSelectAll = "SELECT * FROM badge";
const sqlCount = "SELECT COUNT(*) AS count FROM badge";
const sqlUpdate = "UPDATE badge SET authorizationLevel=$authorizationLevel, endOfValidity=$endOfValidity WHERE badgeNumber=$badgeNumber";
const sqlDelete = "DELETE FROM badge WHERE badgeNumber=$badgeNumber";
const sqlExist = "SELECT (count(*) > 0) as found FROM badge WHERE badgeNumber=$badgeNumber";
const sqlInsert = "INSERT into badge (badgeNumber, authorizationLevel, endOfValidity) VALUES ($badgeNumber, $authorizationLevel, $endOfValidity)";

/**
 * DAO of entity Badge
 */
module.exports = class BadgeDao {

    constructor() {
        this.genericDao = new GenericDao(
            sqlSelectById,
            sqlSelectAll,
            sqlCount,
		    sqlInsert,
            sqlUpdate,
            sqlDelete,
            sqlExist
        );
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param badgeNumber
     * @return entity
     */
    findById(badgeNumber) {
       let sqlParams = {
			$badgeNumber: badgeNumber
		};
        return this.genericDao.findOne(sqlParams)
            .then(row => {
                if(row) {
                    return new Badge(row.badgeNumber, row.authorizationLevel, row.endOfValidity);
                } else {
                    return false;
                }
            })
    };

    /**
     * Finds all entities.
     * @return all entities
     */
    findAll() {
        return this.genericDao.findAll().then(rows => {
            let badges = [];
            if (rows) {
                for (const row of rows) {
                    badges.push(new Badge(row.badgeNumber, row.authorizationLevel, row.endOfValidity));
                }
            }
            return badges;
        });
    };

    /**
     * Counts all the records present in the database
     * @return count
     */
    countAll() {
        return this.genericDao.findOne();
    };

    /**
     * Updates the given entity in the database
     * @param Badge
     * @return true if the entity has been updated, false if not found and not updated
     */
    update(Badge) {
        let sqlParams = {
 			$badgeNumber: Badge.badgeNumber,
 			$authorizationLevel: Badge.authorizationLevel,
 			$endOfValidity: new Date(Badge.endOfValidity).toISOString()
        };
        return this.genericDao.update(sqlParams);
    };

    /**
     * Save the given entity in the database in case it exist, else create a new one
     * @param Badge
     * @return the updated or created entity
     */
    save(Badge) {
        return this.exists(Badge).then(exist => {
            if(exist) {
                return this.update(Badge).then(result => {
                    if (result === true) {
                        return {
                            body:{
                                badgeNumber: Badge.badgeNumber,
                                authorizationLevel: Badge.authorizationLevel,
                                endOfValidity: new Date(Badge.endOfValidity).toISOString()
                            },
                            newItem: false
                        };
                    } else {
                        return result;
                    }
                });
            } else {
                return this.create(Badge).then(result => {
                    if (result) {
                        return {
                            body: result,
                            newItem: true
                        };
                    } else {
                        return result;
                    }
                });
            }
        });
    };

    /**
     * Creates the given entity in the database
     * @param Badge
     * returns database insertion status
     */
    create(Badge) {
        let sqlParams = {
 			$badgeNumber: Badge.badgeNumber,
 			$authorizationLevel: Badge.authorizationLevel,
 			$endOfValidity: new Date(Badge.endOfValidity).toISOString()
        };

        return this.genericDao.insert(sqlParams)
            .then(id => {
                if (id) {
                    return {
 					    badgeNumber: Badge.badgeNumber,
 					    authorizationLevel: Badge.authorizationLevel,
 					    endOfValidity: new Date(Badge.endOfValidity).toISOString()
                  };
                } else {
                    return false;
                }
            });
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param badgeNumber
     * returns database deletion status
     */
    deleteById(badgeNumber) {
		let sqlParams = {
			$badgeNumber: badgeNumber
		};
        return this.genericDao.delete(sqlParams);
    };

    /**
     * Deletes an entity using the entity
     * @param Badge
     * returns database deletion status
     */
    delete(Badge) {
        let sqlParams = {
 			$badgeNumber : Badge.badgeNumber
        };
        return this.genericDao.delete(sqlParams);
    };

    /**
     * Returns true if an entity exists with the given Id / Primary Key
     * @param badgeNumber
     * returns database entry existence status (true/false)
     */
    existsById(badgeNumber) {
		let sqlParams = {
			$badgeNumber: badgeNumber
		};
        return this.genericDao.existsOne(sqlParams);
    };

    /**
     * Returns true if an entity exists using the entity
     * @param Badge
     * returns database entry existence status (true/false)
     */
    exists(Badge) {
        let sqlParams = {
            $badgeNumber : Badge.badgeNumber
        };
        return this.genericDao.existsOne(sqlParams);
    };
};