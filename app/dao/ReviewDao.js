/*
 * Created on 2018-01-15 ( Time 11:23:59 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Review entity
const Review = require('../model/Review');

// Load DAO Common functions
const GenericDao = require('./commons/genericDao');

// SQL Queries
const sqlSelectById = "SELECT customerCode, bookId, reviewText, reviewNote, creation, lastUpdate FROM review WHERE customerCode=$customerCode AND bookId=$bookId";
const sqlSelectAll = "SELECT * FROM review";
const sqlCount = "SELECT COUNT(*) AS count FROM review";
const sqlUpdate = "UPDATE review SET reviewText=$reviewText, reviewNote=$reviewNote, creation=$creation, lastUpdate=$lastUpdate WHERE customerCode=$customerCode AND bookId=$bookId";
const sqlDelete = "DELETE FROM review WHERE customerCode=$customerCode AND bookId=$bookId";
const sqlExist = "SELECT (count(*) > 0) as found FROM review WHERE customerCode=$customerCode AND bookId=$bookId";
const sqlInsert = "INSERT into review (customerCode, bookId, reviewText, reviewNote, creation, lastUpdate) VALUES ($customerCode, $bookId, $reviewText, $reviewNote, $creation, $lastUpdate)";

/**
 * DAO of entity Review
 */
module.exports = class ReviewDao {

    constructor() {
        this.genericDao = new GenericDao(
            sqlSelectById,
            sqlSelectAll,
            sqlCount,
		    sqlInsert,
            sqlUpdate,
            sqlDelete,
            sqlExist
        );
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param customerCode, bookId
     * @return entity
     */
    findById(customerCode, bookId) {
       let sqlParams = {
			$customerCode: customerCode,
			$bookId: bookId
		};
        return this.genericDao.findOne(sqlParams)
            .then(row => {
                if(row) {
                    return new Review(row.customerCode, row.bookId, row.reviewText, row.reviewNote, row.creation, row.lastUpdate);
                } else {
                    return false;
                }
            })
    };

    /**
     * Finds all entities.
     * @return all entities
     */
    findAll() {
        return this.genericDao.findAll().then(rows => {
            let reviews = [];
            if (rows) {
                for (const row of rows) {
                    reviews.push(new Review(row.customerCode, row.bookId, row.reviewText, row.reviewNote, row.creation, row.lastUpdate));
                }
            }
            return reviews;
        });
    };

    /**
     * Counts all the records present in the database
     * @return count
     */
    countAll() {
        return this.genericDao.findOne();
    };

    /**
     * Updates the given entity in the database
     * @param Review
     * @return true if the entity has been updated, false if not found and not updated
     */
    update(Review) {
        let sqlParams = {
 			$customerCode: Review.customerCode,
 			$bookId: Review.bookId,
 			$reviewText: Review.reviewText,
 			$reviewNote: Review.reviewNote,
 			$creation: Review.creation,
 			$lastUpdate: Review.lastUpdate
        };
        return this.genericDao.update(sqlParams);
    };

    /**
     * Save the given entity in the database in case it exist, else create a new one
     * @param Review
     * @return the updated or created entity
     */
    save(Review) {
        return this.exists(Review).then(exist => {
            if(exist) {
                return this.update(Review).then(result => {
                    if (result === true) {
                        return {
                            body:{
                                customerCode: Review.customerCode,
                                bookId: Review.bookId,
                                reviewText: Review.reviewText,
                                reviewNote: Review.reviewNote,
                                creation: Review.creation,
                                lastUpdate: Review.lastUpdate
                            },
                            newItem: false
                        };
                    } else {
                        return result;
                    }
                });
            } else {
                return this.create(Review).then(result => {
                    if (result) {
                        return {
                            body: result,
                            newItem: true
                        };
                    } else {
                        return result;
                    }
                });
            }
        });
    };

    /**
     * Creates the given entity in the database
     * @param Review
     * returns database insertion status
     */
    create(Review) {
        let sqlParams = {
 			$customerCode: Review.customerCode,
 			$bookId: Review.bookId,
 			$reviewText: Review.reviewText,
 			$reviewNote: Review.reviewNote,
 			$creation: Review.creation,
 			$lastUpdate: Review.lastUpdate
        };

        return this.genericDao.insert(sqlParams)
            .then(id => {
                if (id) {
                    return {
 					    customerCode: Review.customerCode,
 					    bookId: Review.bookId,
 					    reviewText: Review.reviewText,
 					    reviewNote: Review.reviewNote,
 					    creation: Review.creation,
 					    lastUpdate: Review.lastUpdate
                  };
                } else {
                    return false;
                }
            });
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param customerCode, bookId
     * returns database deletion status
     */
    deleteById(customerCode, bookId) {
		let sqlParams = {
			$customerCode: customerCode,
			$bookId: bookId
		};
        return this.genericDao.delete(sqlParams);
    };

    /**
     * Deletes an entity using the entity
     * @param Review
     * returns database deletion status
     */
    delete(Review) {
        let sqlParams = {
 			$customerCode : Review.customerCode, 
            $bookId : Review.bookId
        };
        return this.genericDao.delete(sqlParams);
    };

    /**
     * Returns true if an entity exists with the given Id / Primary Key
     * @param customerCode, bookId
     * returns database entry existence status (true/false)
     */
    existsById(customerCode, bookId) {
		let sqlParams = {
			$customerCode: customerCode,
			$bookId: bookId
		};
        return this.genericDao.existsOne(sqlParams);
    };

    /**
     * Returns true if an entity exists using the entity
     * @param Review
     * returns database entry existence status (true/false)
     */
    exists(Review) {
        let sqlParams = {
            $customerCode : Review.customerCode, 
            $bookId : Review.bookId
        };
        return this.genericDao.existsOne(sqlParams);
    };
};