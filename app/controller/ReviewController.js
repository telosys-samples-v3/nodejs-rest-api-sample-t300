/*
 * Created on 2018-01-15 ( Time 11:23:59 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Review Data Access Object
const ReviewDao = require('../dao/ReviewDao');

// Load Controller Common function
const ControllerCommon = require('./common/controllerCommon');

// Load Review entity
const Review = require('../model/Review');

/**
 * Review Controller
 */
module.exports = class ReviewController {

    constructor() {
        this.reviewDao = new ReviewDao();
        this.common = new ControllerCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param req, res
     * @return findById response's code status and body
     */
    findById(req, res) {
 		let customerCode = req.params.customerCode;
 		let bookId = req.params.bookId;
        this.reviewDao.findById(customerCode, bookId)
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Finds all entities.
     * @param res
     * @return findAll response's code status and body
     */
    findAll(res) {
        this.reviewDao.findAll()
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Updates the given entity in the database
     * @param req, res
     * @return update response's code status and body
     */
    update(req, res) {
        let review = new Review();

        review.customerCode = req.params.customerCode;
        review.bookId = req.params.bookId;
        review.reviewText = req.body.reviewText;
        review.reviewNote = req.body.reviewNote;
        review.creation = req.body.creation;
        review.lastUpdate = req.body.lastUpdate;

        return this.reviewDao.update(review)
            .then(this.common.updateSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Save the given entity in the database
     * @param req, res
     * @return save response's code status and body
     */
    save(req, res) {
        let review = new Review();

        review.customerCode = req.body.customerCode;
        review.bookId = req.body.bookId;
        review.reviewText = req.body.reviewText;
        review.reviewNote = req.body.reviewNote;
        review.creation = req.body.creation;
        review.lastUpdate = req.body.lastUpdate;

        return this.reviewDao.save(review)
            .then(this.common.saveSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Creates the given entity in the database
     * @param req, res
     * @returns create response's code status and body
     */
    create(req, res) {
        let review = new Review();

		if (req.body.customerCode && req.body.bookId) {
 			review.customerCode = req.body.customerCode;		
 			review.bookId = req.body.bookId;		
		}

 		review.reviewText = req.body.reviewText;
 		review.reviewNote = req.body.reviewNote;
 		review.creation = req.body.creation;
 		review.lastUpdate = req.body.lastUpdate;

		return this.reviewDao.create(review)
                .then(this.common.createSuccess(res))
                .catch(this.common.noSuccess(res));
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param req, res
     * @returns delete response's code status and body
     */
    deleteById(req, res) {
 		let customerCode = req.params.customerCode;
 		let bookId = req.params.bookId;
        this.reviewDao.deleteById(customerCode, bookId)
            .then(this.common.deleteSuccess(res))
            .catch(this.common.noSuccess(res));
    };

};