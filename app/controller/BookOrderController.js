/*
 * Created on 2018-01-15 ( Time 11:23:58 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load BookOrder Data Access Object
const BookOrderDao = require('../dao/BookOrderDao');

// Load Controller Common function
const ControllerCommon = require('./common/controllerCommon');

// Load BookOrder entity
const BookOrder = require('../model/BookOrder');

/**
 * BookOrder Controller
 */
module.exports = class BookOrderController {

    constructor() {
        this.bookOrderDao = new BookOrderDao();
        this.common = new ControllerCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param req, res
     * @return findById response's code status and body
     */
    findById(req, res) {
 		let id = req.params.id;
        this.bookOrderDao.findById(id)
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Finds all entities.
     * @param res
     * @return findAll response's code status and body
     */
    findAll(res) {
        this.bookOrderDao.findAll()
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Updates the given entity in the database
     * @param req, res
     * @return update response's code status and body
     */
    update(req, res) {
        let bookOrder = new BookOrder();

        bookOrder.id = req.params.id;
        bookOrder.shopCode = req.body.shopCode;
        bookOrder.customerCode = req.body.customerCode;
        bookOrder.employeeCode = req.body.employeeCode;
        bookOrder.date = req.body.date;
        bookOrder.state = req.body.state;

        return this.bookOrderDao.update(bookOrder)
            .then(this.common.updateSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Save the given entity in the database
     * @param req, res
     * @return save response's code status and body
     */
    save(req, res) {
        let bookOrder = new BookOrder();

        bookOrder.id = req.body.id;
        bookOrder.shopCode = req.body.shopCode;
        bookOrder.customerCode = req.body.customerCode;
        bookOrder.employeeCode = req.body.employeeCode;
        bookOrder.date = req.body.date;
        bookOrder.state = req.body.state;

        return this.bookOrderDao.save(bookOrder)
            .then(this.common.saveSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Creates the given entity in the database
     * @param req, res
     * @returns create response's code status and body
     */
    create(req, res) {
        let bookOrder = new BookOrder();

		if (req.body.id) {
 			bookOrder.id = req.body.id;		
		}

 		bookOrder.shopCode = req.body.shopCode;
 		bookOrder.customerCode = req.body.customerCode;
 		bookOrder.employeeCode = req.body.employeeCode;
 		bookOrder.date = req.body.date;
 		bookOrder.state = req.body.state;

		return this.bookOrderDao.create(bookOrder)
                .then(this.common.createSuccess(res))
                .catch(this.common.noSuccess(res));
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param req, res
     * @returns delete response's code status and body
     */
    deleteById(req, res) {
 		let id = req.params.id;
        this.bookOrderDao.deleteById(id)
            .then(this.common.deleteSuccess(res))
            .catch(this.common.noSuccess(res));
    };

};