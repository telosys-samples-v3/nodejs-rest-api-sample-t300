/*
 * Created on 2018-01-15 ( Time 11:23:59 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load EmployeeGroup Data Access Object
const EmployeeGroupDao = require('../dao/EmployeeGroupDao');

// Load Controller Common function
const ControllerCommon = require('./common/controllerCommon');

// Load EmployeeGroup entity
const EmployeeGroup = require('../model/EmployeeGroup');

/**
 * EmployeeGroup Controller
 */
module.exports = class EmployeeGroupController {

    constructor() {
        this.employeeGroupDao = new EmployeeGroupDao();
        this.common = new ControllerCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param req, res
     * @return findById response's code status and body
     */
    findById(req, res) {
 		let employeeCode = req.params.employeeCode;
 		let groupId = req.params.groupId;
        this.employeeGroupDao.findById(employeeCode, groupId)
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Finds all entities.
     * @param res
     * @return findAll response's code status and body
     */
    findAll(res) {
        this.employeeGroupDao.findAll()
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Updates the given entity in the database
     * @param req, res
     * @return update response's code status and body
     */
    update(req, res) {
        let employeeGroup = new EmployeeGroup();

        employeeGroup.employeeCode = req.params.employeeCode;
        employeeGroup.groupId = req.params.groupId;

        return this.employeeGroupDao.update(employeeGroup)
            .then(this.common.updateSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Save the given entity in the database
     * @param req, res
     * @return save response's code status and body
     */
    save(req, res) {
        let employeeGroup = new EmployeeGroup();

        employeeGroup.employeeCode = req.body.employeeCode;
        employeeGroup.groupId = req.body.groupId;

        return this.employeeGroupDao.save(employeeGroup)
            .then(this.common.saveSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Creates the given entity in the database
     * @param req, res
     * @returns create response's code status and body
     */
    create(req, res) {
        let employeeGroup = new EmployeeGroup();

		if (req.body.employeeCode && req.body.groupId) {
 			employeeGroup.employeeCode = req.body.employeeCode;		
 			employeeGroup.groupId = req.body.groupId;		
		}


		return this.employeeGroupDao.create(employeeGroup)
                .then(this.common.createSuccess(res))
                .catch(this.common.noSuccess(res));
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param req, res
     * @returns delete response's code status and body
     */
    deleteById(req, res) {
 		let employeeCode = req.params.employeeCode;
 		let groupId = req.params.groupId;
        this.employeeGroupDao.deleteById(employeeCode, groupId)
            .then(this.common.deleteSuccess(res))
            .catch(this.common.noSuccess(res));
    };

};