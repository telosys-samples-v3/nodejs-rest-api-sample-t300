/*
 * Created on 2018-01-15 ( Time 11:23:58 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Author Data Access Object
const AuthorDao = require('../dao/AuthorDao');

// Load Controller Common function
const ControllerCommon = require('./common/controllerCommon');

// Load Author entity
const Author = require('../model/Author');

/**
 * Author Controller
 */
module.exports = class AuthorController {

    constructor() {
        this.authorDao = new AuthorDao();
        this.common = new ControllerCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param req, res
     * @return findById response's code status and body
     */
    findById(req, res) {
 		let id = req.params.id;
        this.authorDao.findById(id)
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Finds all entities.
     * @param res
     * @return findAll response's code status and body
     */
    findAll(res) {
        this.authorDao.findAll()
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Updates the given entity in the database
     * @param req, res
     * @return update response's code status and body
     */
    update(req, res) {
        let author = new Author();

        author.id = req.params.id;
        author.firstName = req.body.firstName;
        author.lastName = req.body.lastName;

        return this.authorDao.update(author)
            .then(this.common.updateSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Save the given entity in the database
     * @param req, res
     * @return save response's code status and body
     */
    save(req, res) {
        let author = new Author();

        author.id = req.body.id;
        author.firstName = req.body.firstName;
        author.lastName = req.body.lastName;

        return this.authorDao.save(author)
            .then(this.common.saveSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Creates the given entity in the database
     * @param req, res
     * @returns create response's code status and body
     */
    create(req, res) {
        let author = new Author();

		if (req.body.id) {
 			author.id = req.body.id;		
		}

 		author.firstName = req.body.firstName;
 		author.lastName = req.body.lastName;

		return this.authorDao.create(author)
                .then(this.common.createSuccess(res))
                .catch(this.common.noSuccess(res));
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param req, res
     * @returns delete response's code status and body
     */
    deleteById(req, res) {
 		let id = req.params.id;
        this.authorDao.deleteById(id)
            .then(this.common.deleteSuccess(res))
            .catch(this.common.noSuccess(res));
    };

};