/*
 * Created on 2018-01-15 ( Time 11:23:59 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Customer Data Access Object
const CustomerDao = require('../dao/CustomerDao');

// Load Controller Common function
const ControllerCommon = require('./common/controllerCommon');

// Load Customer entity
const Customer = require('../model/Customer');

/**
 * Customer Controller
 */
module.exports = class CustomerController {

    constructor() {
        this.customerDao = new CustomerDao();
        this.common = new ControllerCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param req, res
     * @return findById response's code status and body
     */
    findById(req, res) {
 		let code = req.params.code;
        this.customerDao.findById(code)
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Finds all entities.
     * @param res
     * @return findAll response's code status and body
     */
    findAll(res) {
        this.customerDao.findAll()
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Updates the given entity in the database
     * @param req, res
     * @return update response's code status and body
     */
    update(req, res) {
        let customer = new Customer();

        customer.code = req.params.code;
        customer.countryCode = req.body.countryCode;
        customer.firstName = req.body.firstName;
        customer.lastName = req.body.lastName;
        customer.login = req.body.login;
        customer.password = req.body.password;
        customer.age = req.body.age;
        customer.city = req.body.city;
        customer.zipCode = req.body.zipCode;
        customer.phone = req.body.phone;
        customer.reviewer = req.body.reviewer;

        return this.customerDao.update(customer)
            .then(this.common.updateSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Save the given entity in the database
     * @param req, res
     * @return save response's code status and body
     */
    save(req, res) {
        let customer = new Customer();

        customer.code = req.body.code;
        customer.countryCode = req.body.countryCode;
        customer.firstName = req.body.firstName;
        customer.lastName = req.body.lastName;
        customer.login = req.body.login;
        customer.password = req.body.password;
        customer.age = req.body.age;
        customer.city = req.body.city;
        customer.zipCode = req.body.zipCode;
        customer.phone = req.body.phone;
        customer.reviewer = req.body.reviewer;

        return this.customerDao.save(customer)
            .then(this.common.saveSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Creates the given entity in the database
     * @param req, res
     * @returns create response's code status and body
     */
    create(req, res) {
        let customer = new Customer();

		if (req.body.code) {
 			customer.code = req.body.code;		
		}

 		customer.countryCode = req.body.countryCode;
 		customer.firstName = req.body.firstName;
 		customer.lastName = req.body.lastName;
 		customer.login = req.body.login;
 		customer.password = req.body.password;
 		customer.age = req.body.age;
 		customer.city = req.body.city;
 		customer.zipCode = req.body.zipCode;
 		customer.phone = req.body.phone;
 		customer.reviewer = req.body.reviewer;

		return this.customerDao.create(customer)
                .then(this.common.createSuccess(res))
                .catch(this.common.noSuccess(res));
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param req, res
     * @returns delete response's code status and body
     */
    deleteById(req, res) {
 		let code = req.params.code;
        this.customerDao.deleteById(code)
            .then(this.common.deleteSuccess(res))
            .catch(this.common.noSuccess(res));
    };

};