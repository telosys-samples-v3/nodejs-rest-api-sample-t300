/*
 * Created on 2018-01-15 ( Time 11:23:59 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Synopsis Data Access Object
const SynopsisDao = require('../dao/SynopsisDao');

// Load Controller Common function
const ControllerCommon = require('./common/controllerCommon');

// Load Synopsis entity
const Synopsis = require('../model/Synopsis');

/**
 * Synopsis Controller
 */
module.exports = class SynopsisController {

    constructor() {
        this.synopsisDao = new SynopsisDao();
        this.common = new ControllerCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param req, res
     * @return findById response's code status and body
     */
    findById(req, res) {
 		let bookId = req.params.bookId;
        this.synopsisDao.findById(bookId)
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Finds all entities.
     * @param res
     * @return findAll response's code status and body
     */
    findAll(res) {
        this.synopsisDao.findAll()
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Updates the given entity in the database
     * @param req, res
     * @return update response's code status and body
     */
    update(req, res) {
        let synopsis = new Synopsis();

        synopsis.bookId = req.params.bookId;
        synopsis.synopsis = req.body.synopsis;

        return this.synopsisDao.update(synopsis)
            .then(this.common.updateSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Save the given entity in the database
     * @param req, res
     * @return save response's code status and body
     */
    save(req, res) {
        let synopsis = new Synopsis();

        synopsis.bookId = req.body.bookId;
        synopsis.synopsis = req.body.synopsis;

        return this.synopsisDao.save(synopsis)
            .then(this.common.saveSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Creates the given entity in the database
     * @param req, res
     * @returns create response's code status and body
     */
    create(req, res) {
        let synopsis = new Synopsis();

		if (req.body.bookId) {
 			synopsis.bookId = req.body.bookId;		
		}

 		synopsis.synopsis = req.body.synopsis;

		return this.synopsisDao.create(synopsis)
                .then(this.common.createSuccess(res))
                .catch(this.common.noSuccess(res));
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param req, res
     * @returns delete response's code status and body
     */
    deleteById(req, res) {
 		let bookId = req.params.bookId;
        this.synopsisDao.deleteById(bookId)
            .then(this.common.deleteSuccess(res))
            .catch(this.common.noSuccess(res));
    };

};