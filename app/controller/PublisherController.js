/*
 * Created on 2018-01-15 ( Time 11:23:59 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Publisher Data Access Object
const PublisherDao = require('../dao/PublisherDao');

// Load Controller Common function
const ControllerCommon = require('./common/controllerCommon');

// Load Publisher entity
const Publisher = require('../model/Publisher');

/**
 * Publisher Controller
 */
module.exports = class PublisherController {

    constructor() {
        this.publisherDao = new PublisherDao();
        this.common = new ControllerCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param req, res
     * @return findById response's code status and body
     */
    findById(req, res) {
 		let code = req.params.code;
        this.publisherDao.findById(code)
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Finds all entities.
     * @param res
     * @return findAll response's code status and body
     */
    findAll(res) {
        this.publisherDao.findAll()
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Updates the given entity in the database
     * @param req, res
     * @return update response's code status and body
     */
    update(req, res) {
        let publisher = new Publisher();

        publisher.code = req.params.code;
        publisher.countryCode = req.body.countryCode;
        publisher.name = req.body.name;
        publisher.email = req.body.email;
        publisher.contact = req.body.contact;
        publisher.city = req.body.city;
        publisher.zipCode = req.body.zipCode;
        publisher.phone = req.body.phone;

        return this.publisherDao.update(publisher)
            .then(this.common.updateSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Save the given entity in the database
     * @param req, res
     * @return save response's code status and body
     */
    save(req, res) {
        let publisher = new Publisher();

        publisher.code = req.body.code;
        publisher.countryCode = req.body.countryCode;
        publisher.name = req.body.name;
        publisher.email = req.body.email;
        publisher.contact = req.body.contact;
        publisher.city = req.body.city;
        publisher.zipCode = req.body.zipCode;
        publisher.phone = req.body.phone;

        return this.publisherDao.save(publisher)
            .then(this.common.saveSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Creates the given entity in the database
     * @param req, res
     * @returns create response's code status and body
     */
    create(req, res) {
        let publisher = new Publisher();

		if (req.body.code) {
 			publisher.code = req.body.code;		
		}

 		publisher.countryCode = req.body.countryCode;
 		publisher.name = req.body.name;
 		publisher.email = req.body.email;
 		publisher.contact = req.body.contact;
 		publisher.city = req.body.city;
 		publisher.zipCode = req.body.zipCode;
 		publisher.phone = req.body.phone;

		return this.publisherDao.create(publisher)
                .then(this.common.createSuccess(res))
                .catch(this.common.noSuccess(res));
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param req, res
     * @returns delete response's code status and body
     */
    deleteById(req, res) {
 		let code = req.params.code;
        this.publisherDao.deleteById(code)
            .then(this.common.deleteSuccess(res))
            .catch(this.common.noSuccess(res));
    };

};