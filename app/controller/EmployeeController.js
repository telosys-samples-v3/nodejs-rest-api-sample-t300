/*
 * Created on 2018-01-15 ( Time 11:23:59 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Employee Data Access Object
const EmployeeDao = require('../dao/EmployeeDao');

// Load Controller Common function
const ControllerCommon = require('./common/controllerCommon');

// Load Employee entity
const Employee = require('../model/Employee');

/**
 * Employee Controller
 */
module.exports = class EmployeeController {

    constructor() {
        this.employeeDao = new EmployeeDao();
        this.common = new ControllerCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param req, res
     * @return findById response's code status and body
     */
    findById(req, res) {
 		let code = req.params.code;
        this.employeeDao.findById(code)
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Finds all entities.
     * @param res
     * @return findAll response's code status and body
     */
    findAll(res) {
        this.employeeDao.findAll()
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Updates the given entity in the database
     * @param req, res
     * @return update response's code status and body
     */
    update(req, res) {
        let employee = new Employee();

        employee.code = req.params.code;
        employee.shopCode = req.body.shopCode;
        employee.firstName = req.body.firstName;
        employee.lastName = req.body.lastName;
        employee.manager = req.body.manager;
        employee.badgeNumber = req.body.badgeNumber;
        employee.email = req.body.email;

        return this.employeeDao.update(employee)
            .then(this.common.updateSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Save the given entity in the database
     * @param req, res
     * @return save response's code status and body
     */
    save(req, res) {
        let employee = new Employee();

        employee.code = req.body.code;
        employee.shopCode = req.body.shopCode;
        employee.firstName = req.body.firstName;
        employee.lastName = req.body.lastName;
        employee.manager = req.body.manager;
        employee.badgeNumber = req.body.badgeNumber;
        employee.email = req.body.email;

        return this.employeeDao.save(employee)
            .then(this.common.saveSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Creates the given entity in the database
     * @param req, res
     * @returns create response's code status and body
     */
    create(req, res) {
        let employee = new Employee();

		if (req.body.code) {
 			employee.code = req.body.code;		
		}

 		employee.shopCode = req.body.shopCode;
 		employee.firstName = req.body.firstName;
 		employee.lastName = req.body.lastName;
 		employee.manager = req.body.manager;
 		employee.badgeNumber = req.body.badgeNumber;
 		employee.email = req.body.email;

		return this.employeeDao.create(employee)
                .then(this.common.createSuccess(res))
                .catch(this.common.noSuccess(res));
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param req, res
     * @returns delete response's code status and body
     */
    deleteById(req, res) {
 		let code = req.params.code;
        this.employeeDao.deleteById(code)
            .then(this.common.deleteSuccess(res))
            .catch(this.common.noSuccess(res));
    };

};