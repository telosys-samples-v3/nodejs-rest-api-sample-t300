/*
 * Created on 2018-01-15 ( Time 11:23:58 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Book Data Access Object
const BookDao = require('../dao/BookDao');

// Load Controller Common function
const ControllerCommon = require('./common/controllerCommon');

// Load Book entity
const Book = require('../model/Book');

/**
 * Book Controller
 */
module.exports = class BookController {

    constructor() {
        this.bookDao = new BookDao();
        this.common = new ControllerCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param req, res
     * @return findById response's code status and body
     */
    findById(req, res) {
 		let id = req.params.id;
        this.bookDao.findById(id)
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Finds all entities.
     * @param res
     * @return findAll response's code status and body
     */
    findAll(res) {
        this.bookDao.findAll()
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Updates the given entity in the database
     * @param req, res
     * @return update response's code status and body
     */
    update(req, res) {
        let book = new Book();

        book.id = req.params.id;
        book.publisherId = req.body.publisherId;
        book.authorId = req.body.authorId;
        book.isbn = req.body.isbn;
        book.title = req.body.title;
        book.price = req.body.price;
        book.quantity = req.body.quantity;
        book.discount = req.body.discount;
        book.availability = req.body.availability;
        book.bestSeller = req.body.bestSeller;

        return this.bookDao.update(book)
            .then(this.common.updateSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Save the given entity in the database
     * @param req, res
     * @return save response's code status and body
     */
    save(req, res) {
        let book = new Book();

        book.id = req.body.id;
        book.publisherId = req.body.publisherId;
        book.authorId = req.body.authorId;
        book.isbn = req.body.isbn;
        book.title = req.body.title;
        book.price = req.body.price;
        book.quantity = req.body.quantity;
        book.discount = req.body.discount;
        book.availability = req.body.availability;
        book.bestSeller = req.body.bestSeller;

        return this.bookDao.save(book)
            .then(this.common.saveSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Creates the given entity in the database
     * @param req, res
     * @returns create response's code status and body
     */
    create(req, res) {
        let book = new Book();

		if (req.body.id) {
 			book.id = req.body.id;		
		}

 		book.publisherId = req.body.publisherId;
 		book.authorId = req.body.authorId;
 		book.isbn = req.body.isbn;
 		book.title = req.body.title;
 		book.price = req.body.price;
 		book.quantity = req.body.quantity;
 		book.discount = req.body.discount;
 		book.availability = req.body.availability;
 		book.bestSeller = req.body.bestSeller;

		return this.bookDao.create(book)
                .then(this.common.createSuccess(res))
                .catch(this.common.noSuccess(res));
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param req, res
     * @returns delete response's code status and body
     */
    deleteById(req, res) {
 		let id = req.params.id;
        this.bookDao.deleteById(id)
            .then(this.common.deleteSuccess(res))
            .catch(this.common.noSuccess(res));
    };

};