/*
 * Created on 2018-01-15 ( Time 11:23:58 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

// Load Badge Data Access Object
const BadgeDao = require('../dao/BadgeDao');

// Load Controller Common function
const ControllerCommon = require('./common/controllerCommon');

// Load Badge entity
const Badge = require('../model/Badge');

/**
 * Badge Controller
 */
module.exports = class BadgeController {

    constructor() {
        this.badgeDao = new BadgeDao();
        this.common = new ControllerCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param req, res
     * @return findById response's code status and body
     */
    findById(req, res) {
 		let badgeNumber = req.params.badgeNumber;
        this.badgeDao.findById(badgeNumber)
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Finds all entities.
     * @param res
     * @return findAll response's code status and body
     */
    findAll(res) {
        this.badgeDao.findAll()
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Updates the given entity in the database
     * @param req, res
     * @return update response's code status and body
     */
    update(req, res) {
        let badge = new Badge();

        badge.badgeNumber = req.params.badgeNumber;
        badge.authorizationLevel = req.body.authorizationLevel;
        badge.endOfValidity = req.body.endOfValidity;

        return this.badgeDao.update(badge)
            .then(this.common.updateSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Save the given entity in the database
     * @param req, res
     * @return save response's code status and body
     */
    save(req, res) {
        let badge = new Badge();

        badge.badgeNumber = req.body.badgeNumber;
        badge.authorizationLevel = req.body.authorizationLevel;
        badge.endOfValidity = req.body.endOfValidity;

        return this.badgeDao.save(badge)
            .then(this.common.saveSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Creates the given entity in the database
     * @param req, res
     * @returns create response's code status and body
     */
    create(req, res) {
        let badge = new Badge();

		if (req.body.badgeNumber) {
 			badge.badgeNumber = req.body.badgeNumber;		
		}

 		badge.authorizationLevel = req.body.authorizationLevel;
 		badge.endOfValidity = req.body.endOfValidity;

		return this.badgeDao.create(badge)
                .then(this.common.createSuccess(res))
                .catch(this.common.noSuccess(res));
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param req, res
     * @returns delete response's code status and body
     */
    deleteById(req, res) {
 		let badgeNumber = req.params.badgeNumber;
        this.badgeDao.deleteById(badgeNumber)
            .then(this.common.deleteSuccess(res))
            .catch(this.common.noSuccess(res));
    };

};