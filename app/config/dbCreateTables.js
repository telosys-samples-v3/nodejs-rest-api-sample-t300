/*
 * Created on 2018-01-15 ( Time 11:23:59 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

const sqlite3 = require('sqlite3').verbose();

/**
 * Database tables creation
 */
let db;

/**
 * Init entities tables if they don't exist
 * @param db Database connection
 */
module.exports = function getDatabase(filename) {

  if(!db) {
    // Load database file (Creates file if it does not exists)
    db = new sqlite3.Database(filename);

    // Initialize database : create tables	
    // Author table
    console.log(`Creating table if it does not exists : 'author'`);
    db.run(`CREATE TABLE if not exists author (
      id INTEGER PRIMARY KEY, 
      firstName VARCHAR, 
      lastName VARCHAR
    )`);
    // Badge table
    console.log(`Creating table if it does not exists : 'badge'`);
    db.run(`CREATE TABLE if not exists badge (
      badgeNumber INTEGER PRIMARY KEY NOT NULL, 
      authorizationLevel Short NOT NULL, 
      endOfValidity Date
    )`);
    // Book table
    console.log(`Creating table if it does not exists : 'book'`);
    db.run(`CREATE TABLE if not exists book (
      id INTEGER PRIMARY KEY NOT NULL, 
      publisherId INTEGER, 
      authorId INTEGER, 
      isbn VARCHAR NOT NULL, 
      title VARCHAR, 
      price BigDecimal, 
      quantity INTEGER, 
      discount INTEGER, 
      availability Short, 
      bestSeller Short, 
      FOREIGN KEY(publisherId) REFERENCES publisher(code) ON DELETE SET NULL, 
      FOREIGN KEY(authorId) REFERENCES author(id) ON DELETE SET NULL
    )`);
    // BookOrder table
    console.log(`Creating table if it does not exists : 'bookOrder'`);
    db.run(`CREATE TABLE if not exists bookOrder (
      id INTEGER PRIMARY KEY NOT NULL, 
      shopCode VARCHAR, 
      customerCode VARCHAR, 
      employeeCode VARCHAR, 
      date Date, 
      state INTEGER, 
      FOREIGN KEY(shopCode) REFERENCES shop(code) ON DELETE SET NULL, 
      FOREIGN KEY(customerCode) REFERENCES customer(code) ON DELETE SET NULL, 
      FOREIGN KEY(employeeCode) REFERENCES employee(code) ON DELETE SET NULL
    )`);
    // BookOrderItem table
    console.log(`Creating table if it does not exists : 'bookOrderItem'`);
    db.run(`CREATE TABLE if not exists bookOrderItem (
      bookOrderId INTEGER, 
      bookId INTEGER, 
      quantity INTEGER NOT NULL, 
      price BigDecimal NOT NULL, PRIMARY KEY (bookOrderId, bookId), 
      FOREIGN KEY(bookOrderId) REFERENCES bookOrder(id) ON DELETE SET NULL, 
      FOREIGN KEY(bookId) REFERENCES book(id) ON DELETE SET NULL
    )`);
    // Country table
    console.log(`Creating table if it does not exists : 'country'`);
    db.run(`CREATE TABLE if not exists country (
      code VARCHAR PRIMARY KEY NOT NULL, 
      name VARCHAR
    )`);
    // Customer table
    console.log(`Creating table if it does not exists : 'customer'`);
    db.run(`CREATE TABLE if not exists customer (
      code VARCHAR PRIMARY KEY NOT NULL, 
      countryCode VARCHAR, 
      firstName VARCHAR, 
      lastName VARCHAR, 
      login VARCHAR NOT NULL, 
      password VARCHAR, 
      age INTEGER, 
      city VARCHAR, 
      zipCode INTEGER, 
      phone VARCHAR, 
      reviewer Short, 
      FOREIGN KEY(countryCode) REFERENCES country(code) ON DELETE SET NULL
    )`);
    // Employee table
    console.log(`Creating table if it does not exists : 'employee'`);
    db.run(`CREATE TABLE if not exists employee (
      code VARCHAR PRIMARY KEY NOT NULL, 
      shopCode VARCHAR, 
      firstName VARCHAR, 
      lastName VARCHAR NOT NULL, 
      manager Short, 
      badgeNumber INTEGER, 
      email VARCHAR, 
      FOREIGN KEY(shopCode) REFERENCES shop(code) ON DELETE SET NULL, 
      FOREIGN KEY(badgeNumber) REFERENCES badge(badgeNumber) ON DELETE SET NULL
    )`);
    // EmployeeGroup table
    console.log(`Creating table if it does not exists : 'employeeGroup'`);
    db.run(`CREATE TABLE if not exists employeeGroup (
      employeeCode VARCHAR, 
      groupId Short, PRIMARY KEY (employeeCode, groupId), 
      FOREIGN KEY(employeeCode) REFERENCES employee(code) ON DELETE SET NULL, 
      FOREIGN KEY(groupId) REFERENCES workgroup(id) ON DELETE SET NULL
    )`);
    // Publisher table
    console.log(`Creating table if it does not exists : 'publisher'`);
    db.run(`CREATE TABLE if not exists publisher (
      code INTEGER PRIMARY KEY NOT NULL, 
      countryCode VARCHAR, 
      name VARCHAR, 
      email VARCHAR, 
      contact VARCHAR, 
      city VARCHAR, 
      zipCode INTEGER, 
      phone VARCHAR, 
      FOREIGN KEY(countryCode) REFERENCES country(code) ON DELETE SET NULL
    )`);
    // Review table
    console.log(`Creating table if it does not exists : 'review'`);
    db.run(`CREATE TABLE if not exists review (
      customerCode VARCHAR, 
      bookId INTEGER, 
      reviewText LONG VARCHAR, 
      reviewNote INTEGER, 
      creation Date, 
      lastUpdate Date, PRIMARY KEY (customerCode, bookId), 
      FOREIGN KEY(customerCode) REFERENCES customer(code) ON DELETE SET NULL, 
      FOREIGN KEY(bookId) REFERENCES book(id) ON DELETE SET NULL
    )`);
    // Shop table
    console.log(`Creating table if it does not exists : 'shop'`);
    db.run(`CREATE TABLE if not exists shop (
      code VARCHAR PRIMARY KEY NOT NULL, 
      name VARCHAR, 
      address1 VARCHAR, 
      address2 VARCHAR, 
      zipCode INTEGER, 
      city VARCHAR, 
      countryCode VARCHAR, 
      phone VARCHAR, 
      email VARCHAR, 
      executive VARCHAR, 
      FOREIGN KEY(countryCode) REFERENCES country(code) ON DELETE SET NULL, 
      FOREIGN KEY(executive) REFERENCES employee(code) ON DELETE SET NULL
    )`);
    // Synopsis table
    console.log(`Creating table if it does not exists : 'synopsis'`);
    db.run(`CREATE TABLE if not exists synopsis (
      bookId INTEGER PRIMARY KEY, 
      synopsis LONG VARCHAR, 
      FOREIGN KEY(bookId) REFERENCES book(id) ON DELETE SET NULL
    )`);
    // Workgroup table
    console.log(`Creating table if it does not exists : 'workgroup'`);
    db.run(`CREATE TABLE if not exists workgroup (
      id Short PRIMARY KEY NOT NULL, 
      name VARCHAR NOT NULL, 
      description VARCHAR NOT NULL, 
      creationDate Date NOT NULL
    )`);

	// Enable SQLite foreign key constraints enforcement
    db.run("PRAGMA foreign_keys=ON;");
  }
  return db;
};